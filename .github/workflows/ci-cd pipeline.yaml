name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - qa
      - staging
      - production

permissions:
  contents: write

env:
  DOCKER_TAR: "docker_image_${{ github.run_number }}.tar"
  DOCKER_IMG_NAME: "irys-ui-img"
  ENVIRONMENT: ${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/qa' && 'qa' || github.ref == 'refs/heads/staging' && 'staging' || github.ref == 'refs/heads/production' && 'production' || 'unknown' }}

jobs:
  set-env-vars:
    runs-on: ubuntu-latest
    outputs:
      GCP_PROJECT_ID: ${{ steps.set-vars.outputs.GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ steps.set-vars.outputs.GCP_SA_KEY }}
      CLUSTER_NAME: ${{ steps.set-vars.outputs.CLUSTER_NAME }}
      CLUSTER_ZONE: ${{ steps.set-vars.outputs.CLUSTER_ZONE }}
    steps:
      - name: Set environment variables based on branch
        id: set-vars
        shell: bash
        run: |
          if [ "${{ env.ENVIRONMENT }}" == "dev" ]; then
            echo "GCP_PROJECT_ID=${{ secrets.GCP_DEV_PROJECT_ID }}" >> $GITHUB_OUTPUT
            ENCODED_SA_KEY=$(echo "${{ secrets.GCP_DEV_SA_KEY }}" | base64 -w 0)
            echo "GCP_SA_KEY=$ENCODED_SA_KEY" >> $GITHUB_OUTPUT
            echo "CLUSTER_NAME=${{ secrets.DEV_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
            echo "CLUSTER_ZONE=${{ secrets.DEV_CLUSTER_ZONE }}" >> $GITHUB_OUTPUT
          elif [ "${{ env.ENVIRONMENT }}" == "qa" ]; then
            echo "GCP_PROJECT_ID=${{ secrets.GCP_QA_PROJECT_ID }}" >> $GITHUB_OUTPUT
            ENCODED_SA_KEY=$(echo "${{ secrets.GCP_QA_SA_KEY }}" | base64)
            echo "GCP_SA_KEY=${ENCODED_SA_KEY}" >> $GITHUB_OUTPUT
            echo "CLUSTER_NAME=${{ secrets.QA_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
            echo "CLUSTER_ZONE=${{ secrets.QA_CLUSTER_ZONE }}" >> $GITHUB_OUTPUT
          elif [ "${{ env.ENVIRONMENT }}" == "staging" ]; then
            echo "GCP_PROJECT_ID=${{ secrets.GCP_STAGING_PROJECT_ID }}" >> $GITHUB_OUTPUT
            ENCODED_SA_KEY=$(echo "${{ secrets.GCP_STAGING_SA_KEY }}" | base64)
            echo "GCP_SA_KEY=${ENCODED_SA_KEY}" >> $GITHUB_OUTPUT
            echo "CLUSTER_NAME=${{ secrets.STAGING_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
            echo "CLUSTER_ZONE=${{ secrets.STAGING_CLUSTER_ZONE }}" >> $GITHUB_OUTPUT
          elif [ "${{ env.ENVIRONMENT }}" == "production" ]; then
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PRODUCTION_PROJECT_ID }}" >> $GITHUB_OUTPUT
            ENCODED_SA_KEY=$(echo "${{ secrets.GCP_PRODUCTION_SA_KEY }}" | base64)
            echo "GCP_SA_KEY=${ENCODED_SA_KEY}" >> $GITHUB_OUTPUT
            echo "CLUSTER_NAME=${{ secrets.PRODUCTION_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
            echo "CLUSTER_ZONE=${{ secrets.PRODUCTION_CLUSTER_ZONE }}" >> $GITHUB_OUTPUT
          else
            echo "Unknown environment"
            exit 1
          fi

  checkout:
    runs-on: ubuntu-latest
    needs: set-env-vars
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  dependency-audit:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies using pnpm
        run: pnpm install

      - name: Audit dependencies using pnpm
        run: pnpm audit --audit-level=low || true

  build-docker-image:
    runs-on: ubuntu-latest
    needs: [dependency-audit, set-env-vars]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Debug Info
        run: |
          echo "Building Docker image for environment: ${{ env.ENVIRONMENT }}"
          echo "Project ID: ${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}"
          echo "Cluster Name: ${{ needs.set-env-vars.outputs.CLUSTER_NAME }}"
          echo "Cluster Zone: ${{ needs.set-env-vars.outputs.CLUSTER_ZONE }}"
          echo "Docker Image Name: ${{ env.DOCKER_IMG_NAME }}"
          echo "Docker Tag: ${{ github.run_number }}"

      - name: Build Docker image
        id: build
        run: |
          docker buildx build --platform linux/amd64 --output type=docker,dest=./${{ env.DOCKER_TAR }} \
          --tag gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/${{ secrets.GCR_REPO_NAME }}/${{ env.DOCKER_IMG_NAME }}:${{ github.run_number }} .

      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./${{ env.DOCKER_TAR }}

  push-docker-image:
    runs-on: ubuntu-latest
    needs: [build-docker-image, set-env-vars]
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Decode Service Account Key
        run: |
          echo "${{ needs.set-env-vars.outputs.GCP_SA_KEY }}" | base64 --decode > "${{ runner.temp }}/gcp-key.json"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ runner.temp }}/gcp-key.json'

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Load Docker image from artifact
        run: docker load -i ./${{ env.DOCKER_TAR }}

      - name: Tag and Push Docker image to GCR
        run: |
          docker tag gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/${{ secrets.GCR_REPO_NAME }}/${{ env.DOCKER_IMG_NAME }}:${{ github.run_number }} \
          gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/${{ secrets.GCR_REPO_NAME }}/${{ env.DOCKER_IMG_NAME }}:${{ github.run_number }}
          docker push gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/${{ secrets.GCR_REPO_NAME }}/${{ env.DOCKER_IMG_NAME }}:${{ github.run_number }}

  update-manifest:
    runs-on: ubuntu-latest
    needs: [push-docker-image]
    steps:
      - name: Checkout manifest repository
        uses: actions/checkout@v3
        with:
          repository: stem-fresh/React-app-manifests
          token: ${{ secrets.PAT_GITHUB }}
          persist-credentials: false
          ref: ${{ github.ref_name }}

      - name: Update image tag in Kubernetes manifest
        run: |
          sed -i "s|image:.*|image: gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/${{ secrets.GCR_REPO_NAME }}/${{ env.DOCKER_IMG_NAME }}:${{ github.run_number }}|g" deployment.yaml

      - name: Commit and push updated manifest
        run: |
          git config --global user.email "your-email@example.com"
          git config --global user.name "GitHub Actions"
          git add deployment.yaml
          git commit -m "Updated image tag to ${{ github.run_number }}"
          git push https://x-access-token:${{ secrets.PAT_GITHUB }}@github.com/stem-fresh/React-app-manifests.git HEAD:${{ github.ref_name }}

  deploy-to-gke:
    runs-on: ubuntu-latest
    needs: [update-manifest, set-env-vars]
    steps:
      - name: Decode Service Account Key
        run: |
          echo "${{ needs.set-env-vars.outputs.GCP_SA_KEY }}" | base64 --decode > "${{ runner.temp }}/gcp-key.json"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ runner.temp }}/gcp-key.json'

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          install_components: 'kubectl'

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ needs.set-env-vars.outputs.CLUSTER_NAME }} --zone ${{ needs.set-env-vars.outputs.CLUSTER_ZONE }} --project ${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}

      - name: Apply Kubernetes manifest
        run: |
          set -o pipefail
          kubectl apply -f name_space.yaml -f deployment.yaml -f service.yaml -f hpa.yaml

      - name: Wait for Deployment to Complete
        run: kubectl rollout status deployment/${{ secrets.DEPLOYMENT_NAME }} --timeout=120s

      - name: Rollback if Deployment Fails
        if: failure()
        run: kubectl rollout undo deployment/${{ secrets.DEPLOYMENT_NAME }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-to-gke]
    if: always()
    steps:
      - name: Clean up Docker images
        run: docker rmi $(docker images -q --filter "dangling=true") || true

      - name: Remove unused images
        run: |
          docker image prune -a --force || true
