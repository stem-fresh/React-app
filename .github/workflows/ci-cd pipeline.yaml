name: CI/CD Pipeline

on:
  push:  
    branches:
      - feature/cicd-pipeline           
      - dev
      # - main

permissions:
  contents: read

env:
  GCR_REPO_NAME: ${{ secrets.GCR_REPO_NAME }}
  DOCKER_TAR: "docker_image_${{ github.run_number }}.tar"
  DOCKER_IMG_NAME: "irys-ui-img"
  PAT_GITHUB: ${{ secrets.PAT_GITHUB }}

jobs:
  set-env-vars:
      runs-on: ubuntu-latest
      outputs:
        GCP_PROJECT_ID: ${{ steps.set-vars.outputs.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ steps.set-vars.outputs.GCP_SA_KEY }}
      steps:
        - id: set-vars
          run: |
            if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              echo "::add-mask::${{ secrets.GCP_DEV_SA_KEY }}"
              echo "::set-output name=GCP_PROJECT_ID::${{ secrets.GCP_DEV_PROJECT_ID }}"
              echo "::set-output name=GCP_SA_KEY::${{ secrets.GCP_DEV_SA_KEY }}"
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "::add-mask::${{ secrets.GCP_PROD_SA_KEY }}"
              echo "::set-output name=GCP_PROJECT_ID::${{ secrets.GCP_PROD_PROJECT_ID }}"
              echo "::set-output name=GCP_SA_KEY::${{ secrets.GCP_PROD_SA_KEY }}"
            elif [[ "${{ github.ref }}" == "refs/heads/feature/cicd-pipeline" ]]; then
              echo "::add-mask::${{ secrets.GCP_DEV_SA_KEY }}"
              echo "::set-output name=GCP_PROJECT_ID::${{ secrets.GCP_DEV_PROJECT_ID }}"
              echo "::set-output name=GCP_SA_KEY::${{ secrets.GCP_DEV_SA_KEY }}"
            fi

  checkout:
    runs-on: ubuntu-latest
    needs: set-env-vars
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  dependency-audit:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
  
      - name: Install pnpm
        run: npm install -g pnpm
  
      - name: List current directory files (for debugging)
        run: ls -al /home/runner/work/React-app  # List files in the correct directory
  
      - name: Install dependencies using pnpm
        run: pnpm install
  
      - name: Audit dependencies using pnpm
        run: pnpm audit --audit-level=low 

  build-docker-image:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        id: build
        run: |
          docker buildx build --platform linux/amd64 --output type=docker,dest=./$DOCKER_TAR \
          --tag gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/${{secrets.GCR_REPO_NAME}}/$DOCKER_IMG_NAME:${{ github.run_number }} .

      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./${{env.DOCKER_TAR}}

  push-docker-image:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ needs.set-env-vars.outputs.GCP_SA_KEY }}

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Load Docker image from artifact
        run: docker load -i ./$DOCKER_TAR

      - name: Tag and Push Docker image to GCR
        run: |
          docker tag gcr.io/$GCP_PROJECT_ID/$GCR_REPO_NAME/$DOCKER_IMG_NAME:${{ github.run_number }} \
          gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$DOCKER_IMG_NAME:${{ github.run_number }}

          docker push gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$DOCKER_IMG_NAME:${{ github.run_number }}

  update-manifest:
    runs-on: ubuntu-latest
    needs: push-docker-image
    steps:
      - name: Checkout manifest repository
        uses: actions/checkout@v3
        with:
          repository: stem-fresh/React-app-manifests
          token: ${{ secrets.PAT_GITHUB }}
          persist-credentials: false
          # Checkout the correct branch based on the current branch
          ref: ${{ github.ref_name }}

      - name: Update image tag in Kubernetes manifest
        run: |
          sed -i "s|image:.*|image: gcr.io/${{ needs.set-env-vars.outputs.GCP_PROJECT_ID }}/$GCR_REPO_NAME/$DOCKER_IMG_NAME:${{ github.run_number }}|g" deployment.yaml

      - name: Commit and push updated manifest
        run: |
          git config --global user.email "thestemfresh@gmail.com"
          git config --global user.name "GitHub Actions"
          git add deployment.yaml
          git commit -m "Updated image tag to ${{ github.run_number }}"
          # Push changes to the same branch as the current one
          git push https://x-access-token:${{ secrets.PAT_GITHUB }}@github.com/stem-fresh/React-app-manifests.git HEAD:${{ github.ref_name }}

  deploy-to-gke:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ needs.set-env-vars.outputs.GCP_SA_KEY }}

      - name: Install kubectl
        run: gcloud components install kubectl

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project $GCP_PROJECT_ID

      - name: Apply Kubernetes manifest
        run: kubectl apply -f deployment.yaml

      - name: Wait for Deployment to Complete
        run: kubectl rollout status deployment/${{ secrets.DEPLOYMENT_NAME }} --timeout=120s

      - name: Rollback if Deployment Fails
        if: failure()
        run: kubectl rollout undo deployment/${{ secrets.DEPLOYMENT_NAME }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Clean up Docker images
        run: docker rmi $(docker images -q --filter "dangling=true") || true
